'''
'''
import numpy as np

PATCHSIZE = 8
DCT_BASIS = np.array([
    [   0.35355339059327373085750423342688009142875671386719,
        0.35355339059327373085750423342688009142875671386719,
        0.35355339059327373085750423342688009142875671386719,
        0.35355339059327373085750423342688009142875671386719,
        0.35355339059327373085750423342688009142875671386719,
        0.35355339059327373085750423342688009142875671386719,
        0.35355339059327373085750423342688009142875671386719,
        0.35355339059327373085750423342688009142875671386719,   ],

    [   0.49039264020161521528962111915461719036102294921875,
      0.41573480615127261783570133957255166023969650268555,
      0.27778511650980114433551193542371038347482681274414,
      0.09754516100806412404189416065491968765854835510254,
      -0.09754516100806412404189416065491968765854835510254,
      -0.27778511650980114433551193542371038347482681274414,
      -0.41573480615127261783570133957255166023969650268555,
      -0.49039264020161521528962111915461719036102294921875,    ],

    [   0.46193976625564336924156805253005586564540863037109,
      0.19134171618254489088961634024599334225058555603027,
      -0.19134171618254489088961634024599334225058555603027,
      -0.46193976625564336924156805253005586564540863037109,
      -0.46193976625564336924156805253005586564540863037109,
      -0.19134171618254489088961634024599334225058555603027,
      0.19134171618254489088961634024599334225058555603027,
      0.46193976625564336924156805253005586564540863037109,     ],

    [   0.41573480615127261783570133957255166023969650268555,
      -0.09754516100806417955304539191274670884013175964355,
      -0.49039264020161521528962111915461719036102294921875,
      -0.27778511650980108882436070416588336229324340820312,
      0.27778511650980108882436070416588336229324340820312,
      0.49039264020161521528962111915461719036102294921875,
      0.09754516100806417955304539191274670884013175964355,
      -0.41573480615127261783570133957255166023969650268555,    ],

    [   0.35355339059327378636865546468470711261034011840820,
      -0.35355339059327378636865546468470711261034011840820,
      -0.35355339059327378636865546468470711261034011840820,
      0.35355339059327378636865546468470711261034011840820,
      0.35355339059327378636865546468470711261034011840820,
      -0.35355339059327378636865546468470711261034011840820,
      -0.35355339059327378636865546468470711261034011840820,
      0.35355339059327378636865546468470711261034011840820,     ],

    [   0.27778511650980114433551193542371038347482681274414,
      -0.49039264020161532631192358167027123272418975830078,
      0.09754516100806412404189416065491968765854835510254,
      0.41573480615127261783570133957255166023969650268555,
      -0.41573480615127261783570133957255166023969650268555,
      -0.09754516100806412404189416065491968765854835510254,
      0.49039264020161532631192358167027123272418975830078,
      -0.27778511650980114433551193542371038347482681274414,    ],

    [   0.19134171618254491864519195587490685284137725830078,
      -0.46193976625564336924156805253005586564540863037109,
      0.46193976625564336924156805253005586564540863037109,
      -0.19134171618254491864519195587490685284137725830078,
      -0.19134171618254491864519195587490685284137725830078,
      0.46193976625564336924156805253005586564540863037109,
      -0.46193976625564336924156805253005586564540863037109,
      0.19134171618254491864519195587490685284137725830078,     ],

    [   0.09754516100806416567525758409828995354473590850830,
      -0.27778511650980108882436070416588336229324340820312,
      0.41573480615127267334685257083037868142127990722656,
      -0.49039264020161521528962111915461719036102294921875,
      0.49039264020161521528962111915461719036102294921875,
      -0.41573480615127267334685257083037868142127990722656,
      0.27778511650980108882436070416588336229324340820312,
      -0.09754516100806416567525758409828995354473590850830     ]
])

'''
Row DCT calculation
'''
def DCT1D(inputArray, forward):
	result = np.array([])
	if forward:
		result = np.array([np.sum(inputArray * DCT_BASIS[:, i]) for i in range(PATCHSIZE)])
	else:
		result = np.array([np.sum(inputArray * DCT_BASIS[i, :]) for i in range(PATCHSIZE)])
	return result


'''
DCT matrix calculation
'''
def DCT2D(patch, forward):
	if not patch.shape == (PATCHSIZE, PATCHSIZE):
		raise ValueError('Patch shape {} does not match ({}, {})'.format(patch.shape, PATCHSIZE, PATCHSIZE))
	tmp = np.zeros((PATCHSIZE, PATCHSIZE))

	# transform row by row
	tmp = np.array([DCT1D(row, forward) for row in patch])
	tmp = np.array([DCT1D(row, forward) for row in np.transpose(tmp)])
	patch = np.transpose(tmp)
	return patch